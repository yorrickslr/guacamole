{
  "vertex_methods" : [],
  "fragment_methods" : [
  {
    "name" : "FragmentColor",
    "source" : "
      void FragmentColor() {

        if (style == 0) {
         gua_color = vec3(0.97,0,0);
         float r = 0.5;
         if (uvec2(0) != roughness_map)
           r = texture(sampler2D(roughness_map), gua_texcoords).r;
         gua_roughness = r/3;
         gua_metalness = 0.6;
         gua_emissivity = 0;
        }
        else if (style == 1) {
         gua_color = vec3(0.955, 0.637, 0.538);
         gua_roughness = 0.3;
         gua_metalness = 0.8;
         gua_emissivity = 0;
        }
        else if (style == 100) {
        }
        else {
         gua_color = vec3(0.913, 0.921, 0.925);
         gua_roughness = 0.3;
         gua_metalness = 0.7;
         gua_emissivity = 0;
        }


        vec3 gua_old_color = gua_color;

        const float r_ind = 1.5;
        const float Rs = ((1.0 - r_ind) * (1.0 - r_ind)) / ((1.0 + r_ind) * (1.0 + r_ind));
        // Schlick's approximation
        float fresnel = Rs + (1.0 - Rs) *
                        pow((1.0 - abs(dot(gua_normal,
                                           normalize(gua_world_position - gua_camera_position)))), 5.0);
        gua_alpha = clamp(opacity + mix(0.0, fresnel, 0.5), 0.0, 1.0);
        //gua_alpha = fresnel;

        // highlight
        float hl_intensity = mix(0.0, clamp(fresnel+0.1, 0.0, 0.9), highlight);
        gua_color = mix(gua_color, vec3(1,1,0), hl_intensity);
        gua_emissivity = hl_intensity;

        // see-through
        const float feather = 0.04;
        const float min_alpha = 0.1;
        if (cut_rad > 0.001) {
          const vec3 p = gua_varying_world_position;
          float cut_dist = length((cut_pos-p)-(dot(cut_pos - p, cut_n)*cut_n));
          gua_alpha = mix(min_alpha,
                          gua_alpha * clamp(min_alpha + (cut_dist-cut_rad)/feather, 0.0, 1.0),
                          cut_dist >= cut_rad);
        }

        // fade out
        const float fade_dist = 0.15;
        gua_alpha *= smoothstep(0.0, 1.0, gl_FragCoord.z / gl_FragCoord.w / fade_dist);

        // model opacity
        gua_alpha *= opacity_total;


        if (style == 100) {
         gua_color = gua_old_color;
         gua_roughness = 1.0;
         gua_metalness = 0.0;
         gua_emissivity = 1.0;
        }

      }",
    "uniforms" : [
      {
        "name" : "style",
        "type" : "int",
        "value" : "0"
      },
      {
        "name" : "highlight",
        "type" : "float",
        "value" : "0.0"
      },
      {
        "name" : "opacity",
        "type" : "float",
        "value" : "1.0"
      },
      {
        "name" : "opacity_total",
        "type" : "float",
        "value" : "1.0"
      },
      {
        "name" : "cut_pos",
        "type" : "vec3",
        "value" : "(0.0 0.0 0.0)"
      },
      {
        "name" : "cut_n",
        "type" : "vec3",
        "value" : "(1.0 0.0 0.0)"
      },
      {
        "name" : "cut_rad",
        "type" : "float",
        "value" : "0.0"
      },
      {
        "name" : "roughness_map",
        "type" : "sampler2D",
        "value" : "0"
      }
    ]
  }
  ]
}

