{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"act",
				"active_button_states_"
			],
			[
				"opaci",
				"opacity_to_set"
			],
			[
				"sha",
				"shader_with_old_name"
			],
			[
				"spo",
				"spoinst_resource_file_string_2"
			],
			[
				"render",
				"render_context"
			],
			[
				"spoi",
				"spoints_node"
			],
			[
				"curre",
				"currently_occupied_vertex_slots"
			],
			[
				"num_",
				"num_occupied_vertex_slots"
			],
			[
				"size_of_",
				"size_of_thicknesses"
			],
			[
				"was_",
				"was_created_empty_"
			],
			[
				"last_pl",
				"last_plane_normal_exists"
			],
			[
				"flipped",
				"flipped_averaged_normal"
			],
			[
				"pu",
				"push_vertex"
			],
			[
				"matrix_",
				"matrix_packages_to_submit_"
			],
			[
				"sub",
				"submitted_camera_matrix_package"
			],
			[
				"line_strip_ex",
				"line_strip_example_real_geometry_node"
			],
			[
				"vertex_",
				"vertex_thickness_database"
			],
			[
				"norm_",
				"norm_z"
			],
			[
				"line_strip_",
				"line_strip_update_job"
			],
			[
				"detected",
				"detected_matrix_identity"
			],
			[
				"curr",
				"current_feedback_mono_mode"
			],
			[
				"matr",
				"matrix_package"
			],
			[
				"current",
				"current_feedback_is_camera_status"
			],
			[
				"m_matrix",
				"m_matrix_package_back"
			],
			[
				"curren",
				"current_feedback_is_camera_status"
			],
			[
				"m_ma",
				"m_matrix_packages"
			],
			[
				"matric",
				"m_matrix_package_back"
			],
			[
				"pro",
				"projection_matrix"
			],
			[
				"m_bu",
				"m_buffer_back"
			],
			[
				"ser",
				"server_endpoint_"
			],
			[
				"mat",
				"material"
			],
			[
				"LineStrip",
				"LineStripResource"
			],
			[
				"des",
				"desired_voxel_size"
			],
			[
				"resi",
				"resize_gpu_resources"
			],
			[
				"voxelsi",
				"voxelsize_sent"
			],
			[
				"feedbac",
				"zmq_feedback_sender_socket_ptr"
			],
			[
				"voxe",
				"voxelsize_sent"
			],
			[
				"feed",
				"feedback_port"
			],
			[
				"feedback",
				"feedback_ip"
			],
			[
				"vo",
				"voxelsize_sent"
			],
			[
				"voxel",
				"quantized_voxel_renderer_shader_stages_"
			],
			[
				"quant",
				"quantized_voxels_v_shader"
			],
			[
				"in_",
				"in_quantized_pos_z"
			],
			[
				"si",
				"size_of_unsigned_short"
			],
			[
				"thr",
				"thread_needs_to_be_joined"
			],
			[
				"receive",
				"receive_streaming_update"
			],
			[
				"LineSt",
				"LineStripResource"
			],
			[
				"m",
				"mvp_projected_center"
			],
			[
				"mirro",
				"mirrored_p1_along_u"
			],
			[
				"gua_var",
				"gua_varying_world_position"
			],
			[
				"vertex",
				"vertex_vis_v_shader"
			],
			[
				"line_",
				"line_object_index"
			],
			[
				"par",
				"parsing_successful_"
			],
			[
				"fi",
				"find_if"
			],
			[
				"vete",
				"vertex_reservoir_size"
			],
			[
				"ini",
				"intitial_line_buffer_size"
			],
			[
				"trim",
				"trimesh_teapot_node"
			],
			[
				"rs_c",
				"rs_cull_back_"
			],
			[
				"rs_w",
				"rs_wireframe_cull_back_"
			],
			[
				"setPlay",
				"setPlaybackModeCB"
			],
			[
				"getPlay",
				"getPlaybackModeCB"
			],
			[
				"frame",
				"frame_cnt"
			],
			[
				"tv_3",
				"tv_3_node"
			],
			[
				"in_vol_resource_",
				"in_vol_resource_path2"
			],
			[
				"head_",
				"head_tv_3_node"
			],
			[
				"VOL_",
				"VOL_MAX_INTENSITY"
			],
			[
				"trans",
				"transform3"
			],
			[
				"tra",
				"transparent_nickel"
			],
			[
				"plod_",
				"plod_rough2"
			],
			[
				"forward_",
				"forward_cube_shader_program_"
			],
			[
				"sorte",
				"sorted_objects"
			],
			[
				"volume_",
				"volume_textures_"
			],
			[
				"backmost_",
				"backmost_frontfaces_depth_buffer_"
			],
			[
				"fbo",
				"backmost_frontface_depth_stencil_rendering_fbo_"
			],
			[
				"complete",
				"complete_node_model_matrix"
			],
			[
				"view",
				"view_matrix"
			],
			[
				"frontmo",
				"frontmost_backfaces_depth_stencil_buffer_"
			],
			[
				"cam",
				"cam_to_destination"
			],
			[
				"ray_",
				"ray_destination"
			],
			[
				"ray",
				"ray_destination"
			],
			[
				"model_",
				"model_matrix"
			],
			[
				"clipp",
				"clipping_geometry_"
			],
			[
				"li",
				"linear_sampler_state"
			],
			[
				"backface",
				"frontmost_backfaces_position_buffer_"
			],
			[
				"compa",
				"comparison_greater_depth_stencil_state_"
			],
			[
				"compari",
				"comparison_less_depth_stencil_state_"
			],
			[
				"fro",
				"frontface_culling_rasterizer_state_"
			],
			[
				"volume_boundar",
				"volume_boundary_shader_program_"
			],
			[
				"color_",
				"volume_raycasting_color_result_"
			],
			[
				"mode",
				"model_space_eye_pos"
			],
			[
				"progra",
				"forward_cube_shader_program_"
			],
			[
				"box_",
				"box_vertex_array_"
			],
			[
				"box_ver",
				"box_vertex_array_"
			],
			[
				"volume",
				"volume_raycasting_fbo_"
			],
			[
				"shader",
				"shaders_loaded_"
			],
			[
				"forward",
				"forward_cube_shader_program_"
			],
			[
				"get_primtives_",
				"get_primitives_per_node"
			],
			[
				"getprimtives",
				"get_primitives_per_node"
			],
			[
				"LQ",
				"LQ_one_pass_program_"
			],
			[
				"lq_one_pas",
				"LQ_one_pass_program_"
			],
			[
				"lq_one",
				"lq_one_pass_vs_source"
			],
			[
				"pass2_",
				"pass2_linked_list_resolve_program_"
			],
			[
				"MIN_ES_DIST",
				"LINKED_LIST_ACCUM_PASS_MIN_ES_DIST"
			],
			[
				"MIN_ES",
				"LINKED_LIST_ACCUM_PASS_MIN_ES_DIST"
			],
			[
				"link",
				"linked_list_buffer_texture_"
			],
			[
				"log_to_l",
				"log_to_lin_pass_sub_renderer_"
			],
			[
				"normal",
				"normal_pass_sub_renderer_"
			],
			[
				"depth_pass",
				"depth_pass_sub_renderer_"
			],
			[
				"Depth",
				"DepthSubRenderer"
			],
			[
				"depth",
				"depth_pass_sub_renderer_"
			],
			[
				"shared_",
				"shared_texture_resources_"
			],
			[
				"Pipeline",
				"PipelinePassDescription"
			],
			[
				"current_",
				"current_viewstate"
			],
			[
				"linked_list",
				"linked_list_resolve_shader_stages_"
			],
			[
				"linked_list_",
				"_initialize_linked_list_resolve_pass_program"
			],
			[
				"linked",
				"linked_list_accumulation_shader_stages_"
			],
			[
				"looked",
				"looked_up_color"
			],
			[
				"point_",
				"point_along_x"
			],
			[
				"image_",
				"image_width_1_"
			],
			[
				"pixe",
				"pixel_difference"
			],
			[
				"pixe_",
				"pixel_1_is_bg"
			],
			[
				"sort_",
				"sort_parallelizm_thres"
			],
			[
				"spawn",
				"spawn_outlier_removal_jobs"
			],
			[
				"spawn_",
				"spawn_compute_bounding_boxes_downsweep_jobs"
			],
			[
				"reduction",
				"reduction_strategy"
			],
			[
				"num",
				"number_of_neighbours_"
			],
			[
				"rad",
				"radius_computation_strategy"
			],
			[
				"nearest",
				"nearest_neighbour_ids"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 285.0,
		"last_filter": "Package Control: I",
		"selected_items":
		[
			[
				"Package Control: I",
				"Package Control: Install Package"
			],
			[
				"install paca",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Preferences: Browse Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"dh = hashlib.sha256(by).hexdigest();",
			"by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read();",
			"urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) );",
			"ipp = sublime.installed_packages_path();",
			"pf = 'Package Control.sublime-package';",
			"'2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1';",
			"import urllib.request,os,hashlib;",
			" import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/wabi7015/Programming/guacamole/resources/shaders/point_shader_volumetric.vert",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/Renderer.cpp",
		"/home/wabi7015/Programming/guacamole/examples/spoints/example-spoints",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/FileBuffer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/KinectCalibrationFile.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/include/gua/spoints/spoints_geometry/DXTCompressor.h",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/BackgroundDetector.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/DXTCompressor.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/NetKinectArray.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-spoints/src/gua/spoints/spoints_geometry/codec/DataTypes.h",
		"/home/wabi7015/Programming/guacamole/resources/shaders/quantized_line_strip_shader_non_volumetric.vert",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/StreamingVoxelsResource.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/StreamingVoxelsLoader.hpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/StreamingVoxelsResource.hpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/LineStripResource.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/LineStripResource.cpp",
		"/home/wabi7015/Programming/guacamole/In file included from /home/wabi7015/Programming/guacamole/src/gua/renderer/LineStripResource.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/node/StreamingVoxelsNode.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/node/StreamingVoxelsNode.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/StreamingVoxelsLoader.cpp",
		"/home/wabi7015/Programming/guacamole/resources/shaders/line_strip_shader_volumetric.geom",
		"/home/wabi7015/Programming/guacamole/resources/shaders/quantized_voxels.vert",
		"/home/wabi7015/Programming/guacamole/resources/shaders/quantized_voxels.geom",
		"/home/wabi7015/Programming/guacamole/examples/volumetric_point_and_line_rendering/main.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/PipelineDescription.cpp",
		"/home/wabi7015/Programming/guacamole/examples/streaming_geometry/main.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/plod/shadow_splatting/p01_depth.geom",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/LineStripRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/utils/LineStrip.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/MaterialLoader.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/Material.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/Material.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/node/TriMeshNode.cpp",
		"/home/wabi7015/Programming/guacamole/examples/input/example-input",
		"/home/wabi7015/Programming/guacamole/           auto g_node(reinterpret_cast<std",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/TriMeshLoader.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/TriMeshLoader.hpp",
		"/home/wabi7015/Programming/guacamole/resources/shaders/line_strip_shader_non_volumetric.frag",
		"/home/wabi7015/Programming/guacamole/resources/shaders/line_strip_shader_non_volumetric.vert",
		"/home/wabi7015/Programming/guacamole/examples/time_varying_volume/example-time_varying_volume",
		"/home/wabi7015/Programming/guacamole/examples/lod_simple/example-lod_simple",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/PipelineDescription.hpp",
		"/home/wabi7015/Programming/guacamole/examples/input/main.cpp",
		"/home/wabi7015/Programming/guacamole/ class LineStripResource ",
		"/usr/include/c++/5/ext/new_allocator.h",
		"/home/wabi7015/Programming/guacamole/resources/shaders/line_strip_shader.vert",
		"/home/wabi7015/Programming/guacamole/include/gua/utils/LineStripImporter.hpp",
		"/home/wabi7015/Programming/guacamole/include/line_strip_importer.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/utils/LineStripPass.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/utils/LineStripResource.cpp",
		"/home/wabi7015/Programming/avango/avango-tv_3/python/TV_3VolumePassDescription.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-plod/include/gua/renderer/PLODPass.hpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/Pipeline.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/Pipeline.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/Frustum.hpp",
		"/opt/schism/current/scm_gl_core/src/scm/gl_core/render_device/opengl/gl_core.h",
		"/home/wabi7015/Programming/tv_3/rendering/src/cube.cpp",
		"/home/wabi7015/Programming/guacamole/examples/time_varying_volume/main.cpp",
		"/home/wabi7015/Programming/guacamole/examples/smooth_lighting/main.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/SkyMapRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/ABuffer.hpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/ShaderProgram.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/ResourceFactory.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/TriMeshRessource.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3VolumePass.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-nurbs/src/gua/renderer/NURBSRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/TriMeshPass.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3SurfacePass.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-plod/include/gua/renderer/PLODLoader.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-plod/src/gua/renderer/PLODLoader.cpp",
		"/home/wabi7015/Programming/guacamole/   TV_3SurfaceRenderer",
		"/home/wabi7015/Programming/guacamole/include/gua/renderer/ShaderProgram.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3Renderer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3VolumeResource.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3VolumeResource.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3VolumePass.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-vive/include/gua/ViveWindow.hpp",
		"/home/wabi7015/Programming/guacamole/examples/CMakeLists.txt",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-vive/src/gua/ViveWindow.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/ray_casting.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/fullscreen_blit.vert",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/fullscreen_blit.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/volume_boundary_rendering.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/volume_boundary_rendering.vert",
		"/home/wabi7015/Programming/guacamole/include/gua/physics/CollisionShape.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3SurfacePass.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/resources/shaders/tv_3/ray_casting.vert",
		"/home/wabi7015/Programming/guacamole/src/gua/renderer/Uniform.cpp",
		"/opt/schism/current/scm_gl_core/src/scm/gl_core/texture_objects/texture_3d.h",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/AccumSubRenderer.cpp",
		"/home/lib/libguacamole-tv_3.so",
		"/home/wabi7015/Programming/guacamole/  { ",
		"/home/wabi7015/Programming/guacamole/include/gua/utils.hpp",
		"/home/wabi7015/Programming/guacamole/include/gua/config.hpp.in",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/node/TV_3Node.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3Pass.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3Pass.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3Resource.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/LodResource.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/gbuffer/lod/linked_list_splatting/p02_ll_resolve.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/PLodRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/gbuffer/lod/linked_list_splatting/p01_ll_accum.vert",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/DepthSubRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/LogToLinSubRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/src/gua/renderer/NormalizationSubRenderer.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/plod/linked_list_splatting/p02_ll_resolve.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/plod/linked_list_splatting/p03_fill_holes.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-lod/resources/shaders/plod/linked_list_splatting/p01_ll_accum.vert",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-plod/resources/shaders/gbuffer/plod/p03_normalization.frag",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3Renderer.hpp",
		"/home/wabi7015/Programming/guacamole/include/gua/math/BoundingBox.hpp",
		"/home/wabi7015/Programming/guacamole/CMakeFiles/guacamole-tv_3.dir/src/gua/renderer/TV_3Renderer.cpp.o",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3Resource.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/TV_3Pass.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/TV_3Renderer.cpp",
		"/opt/boost/current/include/boost/system/error_code.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/renderer/TV_3Loader.cpp",
		"/home/wabi7015/Programming/guacamole/include/gua/node/Node.hpp",
		"/usr/include/c++/5/bits/stl_vector.h",
		"/home/wabi7015/Programming/guacamole/include/gua/scenegraph/NodeVisitor.hpp",
		"/home/wabi7015/Programming/guacamole/ void TV_3Node",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/node/TV_3Node.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/TV_3Resource.cpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/include/gua/renderer/TV_3Loader.hpp",
		"/home/wabi7015/Programming/guacamole/plugins/guacamole-tv_3/src/gua/TV_3Loader.cpp",
		"/home/wabi7015/Programming/guacamole/make[2]",
		"/opt/schism/current/scm_gl_core/src/scm/gl_core/data_types.inl",
		"/opt/schism/current/scm_gl_core/src/scm/gl_core/data_formats.inl"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/wabi7015/Programming/lamure/preprocessing",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"copy_to_buffer",
			"fi",
			"GetLastPos",
			"Compositor",
			"        vr::VRCompositor()->Submit(vr::Eye_Left, &leftEyeTexture);",
			"reflection",
			"material_name",
			"rena",
			"rename",
			"rename_existing_shader",
			"make_sc",
			"vr_system",
			"texture",
			"bounding_box_",
			"));\n",
			"current_controller",
			"recv",
			"HWM",
			"hwm",
			"HWM",
			"hwm",
			"HWM",
			"get_float",
			"uniform_metalness",
			")));\n",
			"add",
			"gua_default_material",
			"load_material",
			"Material",
			"std::cout",
			"update_cache",
			"material_",
			"TriMeshNode",
			"get_tree",
			"apply_fallb",
			"MaterialShaderData",
			"apply_fallback_material",
			"MaterialShaderDatabase",
			"get_tree(",
			"SPoints",
			"m_need_gpu_swap",
			"std::cout",
			"std",
			"std::cout",
			"std:",
			"();\n",
			"raster",
			"create_gpu_resources",
			"render(",
			"render",
			"rasterizer",
			"feedback_need_swap",
			"m_feedback_need_swap_",
			"last_omitted",
			"submitted_camera_matrix_package_",
			"matrix_packages_to_submit",
			"m_feedback_need_swap_",
			"update_",
			"m_need_swap",
			"push_matrix_package",
			"draw",
			"update_buffer",
			"update(",
			"update",
			"frame_counter",
			"data_points_byte_size",
			"set_active",
			"add_window",
			"submitted_camera_matrix_package",
			"LOAD_MATERIALS",
			"TriMeshNode",
			"get_tree",
			"update_",
			"update_feedback",
			"load()",
			"Tryi",
			"copy_to_buffer",
			"Vertex",
			"upload_to",
			"std::",
			"std::cout",
			"LineStripNode",
			"load",
			"create_empty",
			"create_geometry_from_file",
			"update_cache",
			"load(",
			"copy_to_buffer",
			"push_vertex",
			"render_volumetric",
			"rs_",
			"create_empty",
			"std::cout",
			"submitted_camera_matrix_package",
			"m_feedback_need_swap",
			"sendfeedbackloop",
			"++",
			"framecount",
			"is camera",
			"push_matrix_package",
			"push_matrices",
			"line_strip_example_real_geometry_node",
			"NUM OCCUPIED SLOTS",
			"upload_to",
			"copy_to_buffer",
			"load(",
			"load",
			"void",
			"memcmp",
			"memcp",
			"total_num_bytes_to_copy",
			"num_points_to_draw",
			"data_points_byte_size",
			"camera",
			"push_matrix_package",
			"NetKinectArray",
			"m_feedback_need_swap",
			"NetKinectArray",
			"m_feedback_need_swap",
			"view_id",
			"texture_distance_",
			"clear",
			"update_feedback",
			"!empty",
			"!empty()",
			"m_matrix_packages",
			"update",
			"update_feedback"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"SPointsLoader",
			"SPointsRenderer",
			"SPointsResource",
			"spoints/",
			"SPointsPass",
			"SpointsData",
			"spoints_data",
			"spointsdata",
			"spoints_resource",
			"SPointsNode",
			"SPointsResource",
			"SPointsRenderer",
			"spoints/",
			"SPointsRenderer",
			"SpointsNode",
			"SPointsPass",
			"spoints/",
			"SPointsResource",
			"SPointsRenderer",
			"SPointsLoader",
			"SPointsNode",
			"SPointsLoader",
			"Volume",
			"VOLUME",
			"TV_3",
			"Volume",
			"1",
			"0",
			"0.0f",
			"-1.0f",
			"0.0f",
			"",
			"0.0f",
			"//std::cout",
			"image_height_1_,",
			"image_height_1_ ",
			"image_height_1_)",
			"image_data_1_ ",
			"image_height_1_ ",
			"image_width_1_ ",
			"//std::cout",
			"shared_surfel",
			"shared_entropy_surfel",
			"shared_entropy_surfel_vector",
			"diff_values_local",
			"max_delta_E_errors_local",
			"min_delta_E_errors_local",
			"avg_delta_E_errors_local",
			"valid_pixel_count",
			"valid_pixel_array",
			"valid_pixel_after_point",
			"valid_pixel_pre_point",
			"valid_pixel_in_percent",
			"num_images",
			"error_sum",
			"h_im_1",
			"w_im_1",
			"min_global_error",
			"max_global_error",
			"min_local_error",
			"max_local_error",
			"pix_arr_2",
			"pix_arr_1",
			"depth_mask_2",
			"depth_mask_1",
			"//std::cout",
			"c[0]",
			"c[1]",
			"c[2]",
			"centroid[2]",
			"centroid[1]",
			"centroid[0]",
			"c.[2]",
			"c.[1]",
			"c.[0]",
			"second_image_height",
			"second_image_width",
			"first_image_height",
			"",
			"is_valid",
			"xyz_rgb",
			"send_height_divided_by_top_minus_bottom",
			"send_camera",
			"send_rendered",
			"send_threshold",
			"send_transform",
			"deduce_model_id",
			"deduce_view_id",
			"deduce_context_id",
			"reset_system",
			"cut_database",
			"controller",
			"get_context_memory",
			"begin_measure",
			"update_trackball",
			"update_trackball_mouse_pos",
			"update_trackball",
			"dispatchKeyboardInput",
			"end_measure",
			"start_measure",
			"set_trackball_center_of_rotation",
			"ray",
			"ooc_cache",
			"camera",
			"->get_bvh(",
			"add_model",
			"get_instance",
			"get_model",
			"Intersectionbvh",
			"model_database",
			"Toggledi",
			"set_trackball_matrix",
			"dispatchResize",
			"set_projection_matrix",
			"write_view_matrix",
			"management",
			"reset_nodes",
			"serialize_tree_to_file",
			"load_from_disk",
			"add_to_path",
			"contains",
			"read_surfel",
			"get_nearest_neighbours",
			"write_surfel",
			"surfel",
			"empty",
			"serialized",
			"after_upsweep"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "guacamole-project",
	"project": "SPointsRenderer.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 346.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
